import os
from mysql.connector import Error
from mysql.connector.pooling import MySQLConnectionPool
import logging
import time
from threading import Thread, Lock
from collections import defaultdict
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
import sys
from datetime import datetime
import telebot
from telebot import types
from keys import Keys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(threadName)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = Keys.TOKEN
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, parse_mode='HTML', threaded=True)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
bot_running = False
bot_thread = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
DB_CONFIG = {
    'host': 'localhost',
    'database': 'bot',
    'user': 'root',
    'password': '0704',
    'charset': 'utf8mb4',
    'collation': 'utf8mb4_general_ci',
    'pool_name': 'bot_pool',
    'pool_size': 10
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
try:
    db_pool = MySQLConnectionPool(**DB_CONFIG)
    logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
except Error as e:
    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
    db_pool = None

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
IMAGE_DIR = r'C:\Users\User\Desktop\bot\image'
DOC_DIR = r'C:\Users\User\Desktop\bot\docs'

# –ü—É—Ç–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
IMAGES = {
    'main': os.path.join(IMAGE_DIR, 'main_image.png'),
    'admission': os.path.join(IMAGE_DIR, 'admission.jpg'),
    'payment': os.path.join(IMAGE_DIR, 'payment.jpg'),
    'dormitory': os.path.join(IMAGE_DIR, 'dormitory.jpg'),
    'faq': os.path.join(IMAGE_DIR, 'faq.jpg'),
    'code_specialty': os.path.join(IMAGE_DIR, '–ö–æ–¥ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.jpg'),
    'training_duration': os.path.join(IMAGE_DIR, '–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.jpg'),
    'entrance_exams': os.path.join(IMAGE_DIR, '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è.jpg'),
    'admission_places': os.path.join(IMAGE_DIR, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –±—é–¥–∂–µ—Ç –∏ –ø–ª–∞—Ç–∫—É.jpg'),
    'admission_benefits': os.path.join(IMAGE_DIR, '–õ—å–≥–æ—Ç—ã –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.jpg'),
    'tuition_cost': os.path.join(IMAGE_DIR, '–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≥–æ–¥.jpg'),
    'payment_methods': os.path.join(IMAGE_DIR, '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã.jpg'),
    'payment_periods': os.path.join(IMAGE_DIR, '–ü–µ—Ä–∏–æ–¥—ã –æ–ø–ª–∞—Ç—ã.jpg'),
    'contract': os.path.join(IMAGE_DIR, '–û–±—Ä–∞–∑–µ—Ü –¥–æ–≥–æ–≤–æ—Ä–∞.jpg'),
    'dormitory_location': os.path.join(IMAGE_DIR, '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è.jpg'),
    'dormitory_cost': os.path.join(IMAGE_DIR, '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.jpg'),
    'dormitory_checkin': os.path.join(IMAGE_DIR, '–ü–æ—Ä—è–¥–æ–∫ –∑–∞—Å–µ–ª–µ–Ω–∏—è.jpg')
}

DOCUMENTS = {
    'entrance_exams_9': os.path.join(DOC_DIR, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –≤ –í—è—Ç–ì–£.pdf'),
    'entrance_exams_11': os.path.join(DOC_DIR, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –≤ –í—è—Ç–ì–£.pdf'),
    'admission_places': os.path.join(DOC_DIR, '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–æ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.pdf'),
    'contract_2side': os.path.join(DOC_DIR, '–û–±—Ä–∞–∑–µ—Ü –¥–æ–≥–æ–≤–æ—Ä–∞ –æ–± –æ–∫–∞–∑–∞–Ω–∏–∏ –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ - –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –¥–æ–≥–æ–≤–æ—Ä.pdf'),
    'contract_3side': os.path.join(DOC_DIR, '–û–±—Ä–∞–∑–µ—Ü –¥–æ–≥–æ–≤–æ—Ä–∞ –æ–± –æ–∫–∞–∑–∞–Ω–∏–∏ –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ - —Ç—Ä–µ—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –¥–æ–≥–æ–≤–æ—Ä.pdf'),
    'dormitory_info': os.path.join(DOC_DIR, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—â–µ–∂–∏—Ç–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ—Ä—è–¥–∫–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è.pdf'),
    'dormitory_places': os.path.join(DOC_DIR, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –æ–±—â–µ–∂–∏—Ç–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–µ—Å—Ç.pdf'),
    'admission_rules': os.path.join(DOC_DIR, '–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞.pdf'),
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
images = {}
for key, path in IMAGES.items():
    try:
        with open(path, 'rb') as f:
            images[key] = f.read()
        logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {key} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ {key}: {error}")
        images[key] = None

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = defaultdict(lambda: {
    'current_menu': 'main_menu',
    'grade': None,
    'section': None,
    'faq_index': -1,
    'search_results': None,
    'specialty_id': None,
    'menu_stack': []
})
user_states_lock = Lock()

class BotMenus:
    @staticmethod
    def create_menu(buttons):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for btn in buttons:
            markup.add(types.KeyboardButton(btn))
        return markup

    MAIN_MENU_BUTTONS = [
        "1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö",
        "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ",
        "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–µ–∂–∏—Ç–∏–∏",
        "4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π",
        "5. –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    ]
    GRADE_MENU_BUTTONS = ["–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ 9 –∫–ª–∞—Å—Å–æ–≤", "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ 11 –∫–ª–∞—Å—Å–æ–≤", "–ù–∞–∑–∞–¥"]
    ADMISSION_MENU_BUTTONS = [
        "1.1. –ö–æ–¥ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
        "1.2. –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º",
        "1.3. –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è",
        "1.4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–π –∏ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ",
        "1.5. –õ—å–≥–æ—Ç—ã, —É—á–∏—Ç—ã–≤–∞—é—â–∏–µ—Å—è –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏",
        "1.6. –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–±—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–∏–µ–º–∞",
        "–ù–∞–∑–∞–¥"
    ]
    PAYMENT_MENU_BUTTONS = [
        "2.1. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –≤ –≥–æ–¥",
        "2.2. –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è",
        "2.3. –ü–µ—Ä–∏–æ–¥—ã –æ–ø–ª–∞—Ç—ã",
        "2.4. –û–±—Ä–∞–∑–µ—Ü –¥–æ–≥–æ–≤–æ—Ä–∞ –æ–± –æ–∫–∞–∑–∞–Ω–∏–∏ –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥",
        "–ù–∞–∑–∞–¥"
    ]
    DORMITORY_MENU_BUTTONS = [
        "3.1 –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è",
        "3.2 –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
        "3.3 –ü–æ—Ä—è–¥–æ–∫ –∑–∞—Å–µ–ª–µ–Ω–∏—è",
        "3.4 –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ",
        "–ù–∞–∑–∞–¥"
    ]

    MAIN_MENU = create_menu.__func__(MAIN_MENU_BUTTONS)
    GRADE_MENU = create_menu.__func__(GRADE_MENU_BUTTONS)
    ADMISSION_MENU = create_menu.__func__(ADMISSION_MENU_BUTTONS)
    PAYMENT_MENU = create_menu.__func__(PAYMENT_MENU_BUTTONS)
    DORMITORY_MENU = create_menu.__func__(DORMITORY_MENU_BUTTONS)
    NEXT_MENU = create_menu.__func__(["–î–∞–ª–µ–µ", "–ù–∞–∑–∞–¥"])
    END_FAQ_MENU = create_menu.__func__(["–ù–∞–∑–∞–¥"])
    START_MENU = create_menu.__func__(["–ù–∞—á–∞—Ç—å"])

    MENU_TRANSITIONS = {
        'main_menu': {
            'next': None,
            'text': "üéâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help üöÄ",
            'image': 'main',
            'section': None
        },
        'grade_menu': {
            'next': 'main_menu',
            'text': "üéì –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö? –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
            'image': 'admission',
            'section': None
        },
        'admission_menu': {
            'next': 'grade_menu',
            'text': "üìö –í—Å—ë –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            'image': 'admission',
            'section': 'admission'
        },
        'payment_menu': {
            'next': 'main_menu',
            'text': "üí∞ –í—Å—ë –æ–± –æ–ø–ª–∞—Ç–µ –æ–±—É—á–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            'image': 'payment',
            'section': 'payment'
        },
        'dormitory_menu': {
            'next': 'main_menu',
            'text': "üè† –£–∑–Ω–∞–π—Ç–µ –≤—Å—ë –æ –∂–∏–∑–Ω–∏ –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            'image': 'dormitory',
            'section': 'dormitory'
        },
        'search_menu': {
            'next': 'grade_menu',
            'text': "üéì –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            'image': 'admission',
            'section': 'search'
        },
        'specialty_info_menu': {
            'next': 'search_menu',
            'text': "üéì –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:",
            'image': None,
            'section': 'search'
        },
        'faq_menu': {
            'next': 'main_menu',
            'text': "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
            'image': 'faq',
            'section': 'faq'
        },
        'end_faq_menu': {
            'next': 'main_menu',
            'text': "üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã!",
            'image': 'faq',
            'section': 'faq'
        }
    }

    MENU_OBJECTS = {
        'main_menu': MAIN_MENU,
        'grade_menu': GRADE_MENU,
        'admission_menu': ADMISSION_MENU,
        'payment_menu': PAYMENT_MENU,
        'dormitory_menu': DORMITORY_MENU,
        'search_menu': None,
        'specialty_info_menu': create_menu.__func__(["–ù–∞–∑–∞–¥"]),
        'faq_menu': NEXT_MENU,
        'end_faq_menu': END_FAQ_MENU,
        'start_menu': START_MENU
    }

class DatabaseHandler:
    @staticmethod
    def get_connection():
        try:
            connection = db_pool.get_connection()
            if connection.is_connected():
                return connection
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞: {e}")
            return None
        return None

    @staticmethod
    def release_connection(connection, cursor):
        if cursor:
            cursor.close()
        if connection and connection.is_connected():
            connection.close()

    @staticmethod
    def get_specialties(grade=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            if specialty_id:
                query = "SELECT –ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ö–æ–¥_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ FROM —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ WHERE id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = %s AND –ö–ª–∞—Å—Å = %s"
                cursor.execute(query, (specialty_id, grade))
            else:
                query = "SELECT –ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ö–æ–¥_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ FROM —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
                if grade:
                    query += " WHERE –ö–ª–∞—Å—Å = %s"
                    cursor.execute(query, (grade,))
                else:
                    cursor.execute(query)
            result = cursor.fetchall()
            if not result:
                return "üòï –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–ö–æ–¥—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π</b> üéì\n\n"
            for row in result:
                response_text += (
                    f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {row[0]} üìö\n"
                    f"<b>–ö–æ–¥:</b> {row[1]} üî¢\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_specialties: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_training_duration(grade=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            if specialty_id:
                query = """
                    SELECT s.–ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, p.–°—Ä–æ–∫_–æ–±—É—á–µ–Ω–∏—è 
                    FROM –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ p 
                    JOIN —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ s ON p.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                    WHERE s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = %s AND s.–ö–ª–∞—Å—Å = %s
                """
                cursor.execute(query, (specialty_id, grade))
            else:
                query = """
                    SELECT s.–ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, p.–°—Ä–æ–∫_–æ–±—É—á–µ–Ω–∏—è 
                    FROM –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ p 
                    JOIN —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ s ON p.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                """
                if grade:
                    query += " WHERE s.–ö–ª–∞—Å—Å = %s"
                    cursor.execute(query, (grade,))
                else:
                    cursor.execute(query)
            result = cursor.fetchall()
            if not result:
                return "üòï –î–∞–Ω–Ω—ã–µ –æ —Å—Ä–æ–∫–∞—Ö –æ–±—É—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–°—Ä–æ–∫–∏ –æ–±—É—á–µ–Ω–∏—è</b> ‚è≥\n\n"
            for row in result:
                response_text += (
                    f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {row[0]} üéì\n"
                    f"<b>–°—Ä–æ–∫:</b> {row[1]} üìÖ\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_training_duration: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_entrance_exams(grade=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            if specialty_id:
                query = """
                    SELECT s.–ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, e.–î–∞—Ç–∞_–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö, e.–ü—Ä–æ—Ö–æ–¥–Ω–æ–π_–±–∞–ª–ª 
                    FROM –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ e 
                    JOIN —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ s ON e.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                    WHERE s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = %s AND s.–ö–ª–∞—Å—Å = %s
                """
                cursor.execute(query, (specialty_id, grade))
            else:
                query = """
                    SELECT s.–ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, e.–î–∞—Ç–∞_–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö, e.–ü—Ä–æ—Ö–æ–¥–Ω–æ–π_–±–∞–ª–ª 
                    FROM –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ e 
                    JOIN —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ s ON e.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                """
                if grade:
                    query += " WHERE s.–ö–ª–∞—Å—Å = %s"
                    cursor.execute(query, (grade,))
                else:
                    cursor.execute(query)
            result = cursor.fetchall()
            if not result:
                return "<b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è</b> üìù\n\n–ü–æ –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è.\n"
            response_text = "<b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è</b> üìù\n\n"
            for row in result:
                date = row[1] if row[1] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                score = row[2] if row[2] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                response_text += (
                    f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {row[0]} üéì\n"
                    f"<b>–î–∞—Ç–∞:</b> {date} üìÖ\n"
                    f"<b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {score} ‚≠ê\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_entrance_exams: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_admission_places(grade=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            if grade == 11:
                if specialty_id:
                    query = "SELECT –ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ FROM —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ WHERE id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = %s AND –ö–ª–∞—Å—Å = %s"
                    cursor.execute(query, (specialty_id, grade))
                else:
                    query = "SELECT –ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ FROM —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ WHERE –ö–ª–∞—Å—Å = %s"
                    cursor.execute(query, (grade,))
                result = cursor.fetchall()
                if not result:
                    return "üòï –î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–∞—Ö –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
                response_text = "<b>–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è üè´</b>\n\n"
                for row in result:
                    response_text += (
                        f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {row[0]} üéì\n"
                        f"<b>–ë—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç:</b> 0 üÜì\n"
                        f"<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚≠êÔ∏è\n"
                        f"<b>–°—Ç–∏–ø–µ–Ω–¥–∏—è:</b> –ù–µ—Ç üí∏\n"
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    )
                return response_text
            else:
                if specialty_id:
                    query = """
                        SELECT s.–ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, p.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç_–Ω–∞_–±—é–¥–∂–µ—Ç, p.–°—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª, p.–ù–∞–ª–∏—á–∏–µ_—Å—Ç–∏–ø–µ–Ω–¥–∏–∏ 
                        FROM –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ p 
                        JOIN —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ s ON p.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                        WHERE s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = %s AND s.–ö–ª–∞—Å—Å = %s
                    """
                    cursor.execute(query, (specialty_id, grade))
                else:
                    query = """
                        SELECT s.–ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, p.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç_–Ω–∞_–±—é–¥–∂–µ—Ç, p.–°—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª, p.–ù–∞–ª–∏—á–∏–µ_—Å—Ç–∏–ø–µ–Ω–¥–∏–∏ 
                        FROM –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ p 
                        JOIN —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ s ON p.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                    """
                    if grade:
                        query += " WHERE s.–ö–ª–∞—Å—Å = %s"
                        cursor.execute(query, (grade,))
                    else:
                        query.execute(query)
                result = cursor.fetchall()
                if not result:
                    return "üòï –î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–∞—Ö –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
                response_text = "<b>–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è üè´</b>\n\n"
                for row in result:
                    budget_places = row[1]
                    avg_score = row[2]
                    if avg_score is None or avg_score.strip() == '-' or avg_score.strip().lower() == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                        avg_score_display = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                    else:
                        try:
                            avg_score_clean = avg_score.replace(',', '.')
                            avg_score_float = float(avg_score_clean)
                            avg_score_display = f"{avg_score_float:.2f}".replace('.', ',')
                        except (ValueError, TypeError):
                            avg_score_display = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                    scholarship = row[3] if row[3] else '–ù–µ—Ç'
                    if row[0].lower().startswith("–ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö"):
                        scholarship = "–î–∞"
                    response_text += (
                        f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {row[0]} üéì\n"
                        f"<b>–ë—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç:</b> {budget_places} üÜì\n"
                        f"<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score_display} ‚≠êÔ∏è\n"
                        f"<b>–°—Ç–∏–ø–µ–Ω–¥–∏—è:</b> {scholarship} üí∏\n"
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    )
                return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_admission_places: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_admission_benefits(grade=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT –û—Ç–≤–µ—Ç FROM –≤–æ–ø—Ä–æ—Å—ã WHERE –í–æ–ø—Ä–æ—Å = '–ö–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã –µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏?'")
            result = cursor.fetchone()
            if not result:
                return "üòï –õ—å–≥–æ—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–õ—å–≥–æ—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö</b> üéâ\n\n"
            benefits = result[0].split('; ')
            for benefit in benefits:
                response_text += f"‚úÖ {benefit}\n"
            response_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_admission_benefits: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_tuition_cost(chat_id=None, specialty_id=None, ignore_specialty_id=False):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            query = """
                SELECT DISTINCT s.–ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, c.–°—Ç–æ–∏–º–æ—Å—Ç—å_–≤_–≥–æ–¥ 
                FROM —Å—Ç–æ–∏–º–æ—Å—Ç—å c 
                JOIN —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ s ON c.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = s.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            """
            if specialty_id and not ignore_specialty_id:
                query += " WHERE c.id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = %s"
                cursor.execute(query, (specialty_id,))
            else:
                cursor.execute(query)
            result = cursor.fetchall()
            if not result:
                return "üòï –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</b> üí∞\n\n"
            for row in result:
                response_text += (
                    f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {row[0]} üéì\n"
                    f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≥–æ–¥:</b> {row[1]} —Ä—É–±. üí∏\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_tuition_cost: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_payment_methods(chat_id=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT DISTINCT –°–ø–æ—Å–æ–±—ã_–æ–ø–ª–∞—Ç—ã FROM —Å—Ç–æ–∏–º–æ—Å—Ç—å LIMIT 1")
            result = cursor.fetchone()
            if not result:
                return "üòï –î–∞–Ω–Ω—ã–µ –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ</b> üí≥\n\n"
            methods = result[0].split('; ')
            for method in methods:
                response_text += f"‚úÖ {method}\n"
            response_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_payment_methods: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_payment_periods(chat_id=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT DISTINCT –ü–µ—Ä–∏–æ–¥_–æ–ø–ª–∞—Ç—ã FROM —Å—Ç–æ–∏–º–æ—Å—Ç—å LIMIT 1")
            result = cursor.fetchone()
            if not result:
                return "üòï –î–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–∏–æ–¥–∞—Ö –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–ü–µ—Ä–∏–æ–¥—ã –æ–ø–ª–∞—Ç—ã</b> üìÖ\n\n"
            response_text += (
                f"<b>–í–∞—Ä–∏–∞–Ω—Ç:</b> {result[0]} ‚è∞\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_payment_periods: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_dormitory_location(chat_id=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ FROM –æ–±—â–µ–∂–∏—Ç–∏–µ LIMIT 1")
            result = cursor.fetchone()
            if not result:
                return "üòï –î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –æ–±—â–µ–∂–∏—Ç–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ</b> üè†\n\n"
            response_text += f"<b>–ê–¥—Ä–µ—Å:</b> {result[0]} üìç\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_dormitory_location: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_dormitory_cost(chat_id=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT –°—Ç–æ–∏–º–æ—Å—Ç—å FROM –æ–±—â–µ–∂–∏—Ç–∏–µ LIMIT 1")
            result = cursor.fetchone()
            if not result:
                return "üòï –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b> üí∞\n\n"
            response_text += f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {result[0]} üè†\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_dormitory_cost: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_dormitory_checkin_rules(chat_id=None, specialty_id=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return "üòî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        cursor = None
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT –£—Å–ª–æ–≤–∏—è_–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è FROM –ø–æ—Ä—è–¥–æ–∫_–∑–∞—Å–µ–ª–µ–Ω–∏—è LIMIT 1")
            result = cursor.fetchone()
            if not result:
                return "üòï –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Ä—è–¥–∫–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
            response_text = "<b>–ö–∞–∫ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ</b> üè†\n\n"
            condition = result[0] if result[0] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            formatted_condition = (
                "<b>–£—Å–ª–æ–≤–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–∂–∏—Ç–∏—è</b>\n\n"
                "–ú–µ—Å—Ç–æ –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è:\n"
                "‚úÖ –ò–Ω–æ–≥–æ—Ä–æ–¥–Ω–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–º –±–æ–ª–µ–µ —á–µ–º –≤ 50 –∫–º –æ—Ç –≥. –ö–∏—Ä–æ–≤–∞.\n"
                "‚úÖ –°—Ç—É–¥–µ–Ω—Ç–∞–º, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–º –±–æ–ª–µ–µ —á–µ–º –≤ 30 –∫–º –æ—Ç –≥. –ö–∏—Ä–æ–≤–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä—è–º–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–ª–µ–Ω–∏—è.\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
            response_text += formatted_condition
            return response_text
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ SQL –≤ get_dormitory_checkin_rules: {e}")
            return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_faq_list():
        connection = DatabaseHandler.get_connection()
        if not connection:
            return []
        cursor = None
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT –í–æ–ø—Ä–æ—Å, –û—Ç–≤–µ—Ç FROM –≤–æ–ø—Ä–æ—Å—ã")
            result = cursor.fetchall()
            if not result:
                return []
            faq_list = [(row[0], row[1]) for row in result]
            return faq_list
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FAQ: {e}")
            return []
        finally:
            DatabaseHandler.release_connection(connection, cursor)

    @staticmethod
    def get_all_specialties(grade=None):
        connection = DatabaseHandler.get_connection()
        if not connection:
            return []
        cursor = None
        try:
            cursor = connection.cursor()
            query = "SELECT id_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ù–∞–∑–≤–∞–Ω–∏–µ_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ö–æ–¥_—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ö–ª–∞—Å—Å FROM —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
            if grade:
                query += " WHERE –ö–ª–∞—Å—Å = %s"
                cursor.execute(query, (grade,))
            else:
                cursor.execute(query)
            result = cursor.fetchall()
            return [(row[0], row[1], row[2], row[3]) for row in result]
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π: {e}")
            return []
        finally:
            DatabaseHandler.release_connection(connection, cursor)

class BotHandler:
    @staticmethod
    def check_file_size(file_path):
        try:
            size = os.path.getsize(file_path)
            if size > MAX_FILE_SIZE:
                logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {size} –±–∞–π—Ç ({file_path})")
                return False
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            return False

    @staticmethod
    def split_text(text, max_length=4096):
        parts = []
        current_part = ""
        for line in text.split("\n"):
            if len(current_part) + len(line) + 1 <= max_length:
                current_part += line + "\n"
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = line + "\n"
        if current_part:
            parts.append(current_part.strip())
        return parts

    @staticmethod
    def get_full_specialty_info(chat_id, specialty_id, grade):
        info = []
        info.append(DatabaseHandler.get_specialties(grade, specialty_id))
        info.append(DatabaseHandler.get_training_duration(grade, specialty_id))
        info.append(DatabaseHandler.get_entrance_exams(grade, specialty_id))
        info.append(DatabaseHandler.get_admission_places(grade, specialty_id))
        info.append(DatabaseHandler.get_admission_benefits(grade, specialty_id))
        info.append(DatabaseHandler.get_tuition_cost(chat_id, specialty_id))
        return "\n".join(info)

    @staticmethod
    def create_search_menu(specialties):
        buttons = [spec[1] for spec in specialties] + ["–ù–∞–∑–∞–¥"]
        return BotMenus.create_menu(buttons)

    @staticmethod
    def send_document_with_retry(chat_id, document_path, menu=None, retries=3, initial_delay=2):
        delay = initial_delay
        loading_message = bot.send_message(
            chat_id,
            "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...",
            reply_markup=None
        )
        for attempt in range(retries):
            try:
                if not BotHandler.check_file_size(document_path):
                    bot.delete_message(chat_id, loading_message.message_id)
                    bot.send_message(
                        chat_id,
                        f"‚ö† –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {os.path.basename(document_path)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB",
                        reply_markup=menu
                    )
                    return False
                with open(document_path, 'rb') as doc:
                    bot.send_document(
                        chat_id,
                        doc,
                        timeout=30,
                        caption=f"üìÑ {os.path.basename(document_path)}"
                    )
                    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {document_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    bot.delete_message(chat_id, loading_message.message_id)
                    return True
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_path}: {e}")
                if attempt < retries - 1:
                    time.sleep(delay)
                    delay *= 2
                else:
                    bot.delete_message(chat_id, loading_message.message_id)
                    bot.send_message(
                        chat_id,
                        f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!\n–§–∞–π–ª: {os.path.basename(document_path)}",
                        reply_markup=menu
                    )
                    return False
        bot.delete_message(chat_id, loading_message.message_id)
        return False

    @staticmethod
    def send_message_with_image(message, text, image, menu):
        try:
            if image:
                bot.send_photo(message.chat.id, image, caption=text, reply_markup=menu)
            else:
                bot.send_message(message.chat.id, text, reply_markup=menu)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
            try:
                bot.send_message(message.chat.id, text, reply_markup=menu)
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

    @staticmethod
    def send_message_with_attachment(message, text, image=None, document_path=None, menu=None):
        chat_id = message.chat.id
        text_parts = BotHandler.split_text(text, max_length=4096)
        try:
            if image and len(text) <= 1024:
                bot.send_photo(chat_id, image, caption=text, reply_markup=menu)
            else:
                for part in text_parts:
                    bot.send_message(chat_id, part, reply_markup=menu)
            if document_path:
                if callable(document_path):
                    document_path = document_path(chat_id)
                if isinstance(document_path, list):
                    for doc in document_path:
                        BotHandler.send_document_with_retry(chat_id, doc, menu)
                else:
                    BotHandler.send_document_with_retry(chat_id, document_path, menu)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                bot.send_message(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=menu)
            except:
                logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

    @staticmethod
    def send_message_with_documents(message, text, image, document_paths, menu=None):
        chat_id = message.chat.id
        try:
            BotHandler.send_message_with_attachment(message, text, image, None, menu)
            if callable(document_paths):
                document_paths = document_paths(chat_id)
            if isinstance(document_paths, list):
                for doc_path in document_paths:
                    BotHandler.send_document_with_retry(chat_id, doc_path, menu)
            else:
                BotHandler.send_document_with_retry(chat_id, document_paths, menu)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")

    @staticmethod
    def send_dormitory_location(chat_id, text, image, menu):
        try:
            bot.send_photo(chat_id, image, caption=text, reply_markup=menu)
            twogis_link = "https://2gis.ru/kirov/geo/8163302605632622"
            bot.send_message(chat_id, f"üó∫Ô∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è ‚Ññ1 –Ω–∞ –∫–∞—Ä—Ç–µ:\n<a href='{twogis_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ 2GIS</a>")
            logger.info("–°—Å—ã–ª–∫–∞ –Ω–∞ 2GIS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—â–µ–∂–∏—Ç–∏—è: {e}")
            bot.send_message(chat_id, text, reply_markup=menu)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
response = {
    "1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö": {
        "text": "üéì –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏? –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        "image": images['admission'],
        "menu": 'grade_menu',
        "section": "admission"
    },
    "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ": {
        "text": "üí∞ –í—Å—ë –æ–± –æ–ø–ª–∞—Ç–µ –æ–±—É—á–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "image": images['payment'],
        "menu": 'payment_menu',
        "section": "payment"
    },
    "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–µ–∂–∏—Ç–∏–∏": {
        "text": "üè† –£–∑–Ω–∞–π—Ç–µ –≤—Å—ë –æ –∂–∏–∑–Ω–∏ –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "image": images['dormitory'],
        "menu": 'dormitory_menu',
        "section": "dormitory"
    },
    "4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π": {
        "text": "üéì –ò—â–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º? –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        "menu": 'grade_menu',
        "section": "search"
    },
    "5. –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã": {
        "text": "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
        "image": images['faq'],
        "menu": 'faq_menu',
        "section": "faq"
    },
    "1.1. –ö–æ–¥ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏": {
        "text": lambda chat_id: DatabaseHandler.get_specialties(user_states[chat_id].get('grade'), user_states[chat_id].get('specialty_id')),
        "image": images['code_specialty'],
        "menu": 'admission_menu'
    },
    "1.2. –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º": {
        "text": lambda chat_id: DatabaseHandler.get_training_duration(user_states[chat_id].get('grade'), user_states[chat_id].get('specialty_id')),
        "image": images['training_duration'],
        "menu": 'admission_menu'
    },
    "1.3. –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è": {
        "text": lambda chat_id: DatabaseHandler.get_entrance_exams(user_states[chat_id].get('grade'), user_states[chat_id].get('specialty_id')),
        "image": images['entrance_exams'],
        "document": lambda chat_id: DOCUMENTS['entrance_exams_9'] if user_states[chat_id].get('grade') == 9 else DOCUMENTS['entrance_exams_11'],
        "menu": 'admission_menu'
    },
    "1.4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–π –∏ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ": {
        "text": lambda chat_id: DatabaseHandler.get_admission_places(user_states[chat_id].get('grade'), user_states[chat_id].get('specialty_id')),
        "image": images['admission_places'],
        "document": DOCUMENTS['admission_places'],
        "menu": 'admission_menu'
    },
    "1.5. –õ—å–≥–æ—Ç—ã, —É—á–∏—Ç—ã–≤–∞—é—â–∏–µ—Å—è –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏": {
        "text": lambda chat_id: DatabaseHandler.get_admission_benefits(user_states[chat_id].get('grade'), user_states[chat_id].get('specialty_id')),
        "image": images['admission_benefits'],
        "menu": 'admission_menu'
    },
    "1.6. –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–±—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–∏–µ–º–∞": {
        "text": "<b>–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞</b> üìú\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –Ω–∏–∂–µ!\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "document": DOCUMENTS['admission_rules'],
        "menu": 'admission_menu'
    },
    "2.1. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –≤ –≥–æ–¥": {
        "text": lambda chat_id: DatabaseHandler.get_tuition_cost(chat_id, ignore_specialty_id=True),
        "image": images['tuition_cost'],
        "menu": 'payment_menu'
    },
    "2.2. –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è": {
        "text": lambda chat_id: DatabaseHandler.get_payment_methods(chat_id, user_states[chat_id].get('specialty_id')),
        "image": images['payment_methods'],
        "menu": 'payment_menu'
    },
    "2.3. –ü–µ—Ä–∏–æ–¥—ã –æ–ø–ª–∞—Ç—ã": {
        "text": lambda chat_id: DatabaseHandler.get_payment_periods(chat_id, user_states[chat_id].get('specialty_id')),
        "image": images['payment_periods'],
        "menu": 'payment_menu'
    },
    "2.4. –û–±—Ä–∞–∑–µ—Ü –¥–æ–≥–æ–≤–æ—Ä–∞ –æ–± –æ–∫–∞–∑–∞–Ω–∏–∏ –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥": {
        "text": "<b>–û–±—Ä–∞–∑–µ—Ü –¥–æ–≥–æ–≤–æ—Ä–∞</b> üìù\n\n‚úÖ –î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –¥–æ–≥–æ–≤–æ—Ä\n‚úÖ –¢—Ä–µ—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –¥–æ–≥–æ–≤–æ—Ä\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "image": images['contract'],
        "documents": [
            DOCUMENTS['contract_2side'],
            DOCUMENTS['contract_3side']
        ],
        "menu": 'payment_menu'
    },
    "3.1 –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—â–µ–∂–∏—Ç–∏—è": {
        "text": lambda chat_id: DatabaseHandler.get_dormitory_location(chat_id),
        "image": images['dormitory_location'],
        "menu": 'dormitory_menu',
        "special": "location"
    },
    "3.2 –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è": {
        "text": lambda chat_id: DatabaseHandler.get_dormitory_cost(chat_id),
        "image": images['dormitory_cost'],
        "menu": 'dormitory_menu'
    },
    "3.3 –ü–æ—Ä—è–¥–æ–∫ –∑–∞—Å–µ–ª–µ–Ω–∏—è": {
        "text": lambda chat_id: DatabaseHandler.get_dormitory_checkin_rules(chat_id),
        "image": images['dormitory_checkin'],
        "menu": 'dormitory_menu'
    },
    "3.4 –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ": {
        "text": "<b>–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–±—â–µ–∂–∏—Ç–∏—é</b> üè†\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∑–∞—Å–µ–ª–µ–Ω–∏—è –Ω–∏–∂–µ!\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n",
        "documents": [
            DOCUMENTS['dormitory_info'],
            DOCUMENTS['dormitory_places']
        ],
        "menu": 'dormitory_menu'
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    with user_states_lock:
        user_states[chat_id] = {
            'current_menu': 'main_menu',
            'grade': None,
            'section': None,
            'faq_index': -1,
            'search_results': None,
            'specialty_id': None,
            'menu_stack': []
        }
    welcome_text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –í—è—Ç–ì–£! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å—ë –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –æ–ø–ª–∞—Ç–µ –∏–ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–∏!\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help üöÄ"
    )
    BotHandler.send_message_with_image(message, welcome_text, images['main'], BotMenus.MENU_OBJECTS['main_menu'])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
    <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b> ü§ñ
    /start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
    /stop ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞

    <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b> üìã
    ‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    ‚úÖ –î–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å (9 –∏–ª–∏ 11)
    ‚úÖ –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
    ‚úÖ –ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    """
    bot.send_message(message.chat.id, help_text, reply_markup=BotMenus.MENU_OBJECTS['main_menu'])

@bot.message_handler(commands=['stop'])
def stop_command(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", reply_markup=BotMenus.MENU_OBJECTS['start_menu'])
    with user_states_lock:
        if chat_id in user_states:
            del user_states[chat_id]

@bot.message_handler(func=lambda m: m.text == "–ù–∞—á–∞—Ç—å")
def restart(message):
    chat_id = message.chat.id
    with user_states_lock:
        user_states[chat_id] = {
            'current_menu': 'main_menu',
            'grade': None,
            'section': None,
            'faq_index': -1,
            'search_results': None,
            'specialty_id': None,
            'menu_stack': []
        }
    welcome_text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –í—è—Ç–ì–£! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å—ë –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –æ–ø–ª–∞—Ç–µ –∏–ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–∏!\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help üöÄ"
    )
    BotHandler.send_message_with_image(message, welcome_text, images['main'], BotMenus.MENU_OBJECTS['main_menu'])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'")

@bot.message_handler(func=lambda m: m.text in ["–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ 9 –∫–ª–∞—Å—Å–æ–≤", "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ 11 –∫–ª–∞—Å—Å–æ–≤"])
def handle_grade_selection(message):
    chat_id = message.chat.id
    with user_states_lock:
        if chat_id not in user_states:
            user_states[chat_id] = {
                'current_menu': 'main_menu',
                'grade': None,
                'section': None,
                'faq_index': -1,
                'search_results': None,
                'specialty_id': None,
                'menu_stack': []
            }
        state = user_states[chat_id]
    
    grade = 9 if message.text == "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ 9 –∫–ª–∞—Å—Å–æ–≤" else 11
    state['grade'] = grade
    section = state.get('section')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å {grade}, —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª: {section}")

    if section == "admission":
        state['current_menu'] = 'admission_menu'
        state['menu_stack'] = ['main_menu', 'grade_menu']
        state['specialty_id'] = None
        state['search_results'] = None
        BotHandler.send_message_with_image(
            message,
            BotMenus.MENU_TRANSITIONS['admission_menu']['text'],
            images['admission'],
            BotMenus.MENU_OBJECTS['admission_menu']
        )
    elif section == "search":
        all_specialties = DatabaseHandler.get_all_specialties(grade)
        if not all_specialties:
            bot.send_message(chat_id, "üòï –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=BotMenus.MENU_OBJECTS['main_menu'])
            with user_states_lock:
                user_states[chat_id] = {
                    'current_menu': 'main_menu',
                    'grade': None,
                    'section': None,
                    'faq_index': -1,
                    'search_results': None,
                    'specialty_id': None,
                    'menu_stack': []
                }
            logger.warning(f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ {grade} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        state['search_results'] = all_specialties
        state['current_menu'] = 'search_menu'
        state['menu_stack'] = ['main_menu', 'grade_menu']
        state['specialty_id'] = None
        search_menu = BotHandler.create_search_menu(all_specialties)
        BotMenus.MENU_OBJECTS['search_menu'] = search_menu
        BotHandler.send_message_with_image(
            message,
            BotMenus.MENU_TRANSITIONS['search_menu']['text'],
            images['admission'],
            search_menu
        )
        logger.info(f"–ú–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–ª–∞—Å—Å–∞ {grade} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        state['section'] = "admission"
        state['current_menu'] = 'admission_menu'
        state['menu_stack'] = ['main_menu', 'grade_menu']
        state['specialty_id'] = None
        state['search_results'] = None
        BotHandler.send_message_with_image(
            message,
            BotMenus.MENU_TRANSITIONS['admission_menu']['text'],
            images['admission'],
            BotMenus.MENU_OBJECTS['admission_menu']
        )
        logger.info(f"–û—Ç–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª admission –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

@bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
def handle_back(message):
    chat_id = message.chat.id
    with user_states_lock:
        if chat_id not in user_states:
            user_states[chat_id] = {
                'current_menu': 'main_menu',
                'grade': None,
                'section': None,
                'faq_index': -1,
                'search_results': None,
                'specialty_id': None,
                'menu_stack': []
            }
        state = user_states[chat_id]
    
    current_menu = state['current_menu']

    if current_menu == 'specialty_info_menu':
        next_menu_key = 'search_menu'
        state['current_menu'] = next_menu_key
        state['menu_stack'] = ['main_menu', 'grade_menu']
        state['specialty_id'] = None
        search_menu = BotHandler.create_search_menu(state['search_results'])
        BotMenus.MENU_OBJECTS['search_menu'] = search_menu
        BotHandler.send_message_with_image(
            message,
            BotMenus.MENU_TRANSITIONS[next_menu_key]['text'],
            images[BotMenus.MENU_TRANSITIONS[next_menu_key]['image']],
            search_menu
        )
        return

    if current_menu == 'search_menu':
        next_menu_key = 'grade_menu'
        state['current_menu'] = next_menu_key
        state['menu_stack'] = ['main_menu']
        state['grade'] = None
        state['search_results'] = None
        state['specialty_id'] = None
        BotHandler.send_message_with_image(
            message,
            BotMenus.MENU_TRANSITIONS[next_menu_key]['text'],
            images[BotMenus.MENU_TRANSITIONS[next_menu_key]['image']],
            BotMenus.MENU_OBJECTS[next_menu_key]
        )
        return

    if current_menu in ['faq_menu', 'end_faq_menu']:
        next_menu_key = 'main_menu'
        state['current_menu'] = next_menu_key
        state['menu_stack'] = []
        state['faq_index'] = -1
        state['section'] = None
        state['grade'] = None
        state['specialty_id'] = None
        state['search_results'] = None
        BotHandler.send_message_with_image(
            message,
            BotMenus.MENU_TRANSITIONS[next_menu_key]['text'],
            images[BotMenus.MENU_TRANSITIONS[next_menu_key]['image']],
            BotMenus.MENU_OBJECTS[next_menu_key]
        )
        return

    menu_info = BotMenus.MENU_TRANSITIONS.get(current_menu)
    if not menu_info or not menu_info['next']:
        with user_states_lock:
            user_states[chat_id] = {
                'current_menu': 'main_menu',
                'grade': None,
                'section': None,
                'faq_index': -1,
                'search_results': None,
                'specialty_id': None,
                'menu_stack': []
            }
        BotHandler.send_message_with_image(
            message,
            BotMenus.MENU_TRANSITIONS['main_menu']['text'],
            images[BotMenus.MENU_TRANSITIONS['main_menu']['image']],
            BotMenus.MENU_OBJECTS['main_menu']
        )
        return

    next_menu_key = menu_info['next']
    next_menu_info = BotMenus.MENU_TRANSITIONS[next_menu_key]
    state['current_menu'] = next_menu_key
    state['section'] = next_menu_info['section']

    if next_menu_key in ['main_menu', 'grade_menu']:
        state['grade'] = None
        state['specialty_id'] = None
        state['search_results'] = None
        state['faq_index'] = -1
        state['menu_stack'] = [] if next_menu_key == 'main_menu' else ['main_menu']

    image_key = next_menu_info['image']
    BotHandler.send_message_with_image(
        message,
        next_menu_info['text'],
        images[image_key] if image_key else None,
        BotMenus.MENU_OBJECTS[next_menu_key]
    )

@bot.message_handler(func=lambda m: m.text == "–î–∞–ª–µ–µ" and user_states.get(m.chat.id, {}).get('section') == "faq")
def handle_faq_next(message):
    chat_id = message.chat.id
    with user_states_lock:
        state = user_states[chat_id]
    faq_list = DatabaseHandler.get_faq_list()
    if not faq_list:
        bot.send_message(chat_id, "üòï –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=BotMenus.MENU_OBJECTS['main_menu'])
        with user_states_lock:
            user_states[chat_id] = {
                'current_menu': 'main_menu',
                'grade': None,
                'section': None,
                'faq_index': -1,
                'search_results': None,
                'specialty_id': None,
                'menu_stack': []
            }
        return
    state['faq_index'] += 1
    current_index = state['faq_index']
    if current_index < len(faq_list):
        question, answer = faq_list[current_index]
        response_text = f"<b>‚ùì –í–æ–ø—Ä–æ—Å:</b> {question}\n<b>‚úÖ –û—Ç–≤–µ—Ç:</b> {answer}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("–î–∞–ª–µ–µ"), types.KeyboardButton("–ù–∞–∑–∞–¥"))
        BotHandler.send_message_with_image(message, response_text, images['faq'], markup)
    else:
        end_text = (
            "üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n"
            "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ó–≤–æ–Ω–∏—Ç–µ –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é:\n"
            "üìû +7 (8332) 742-400\n"
            "üìß pk@vyatsu.ru\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
        state['current_menu'] = 'end_faq_menu'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        BotHandler.send_message_with_image(message, end_text, images['faq'], markup)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    try:
        chat_id = message.chat.id
        text = message.text

        with user_states_lock:
            if chat_id not in user_states:
                user_states[chat_id] = {
                    'current_menu': 'main_menu',
                    'grade': None,
                    'section': None,
                    'faq_index': -1,
                    'search_results': None,
                    'specialty_id': None,
                    'menu_stack': []
                }
            state = user_states[chat_id]

        if state['current_menu'] == 'search_menu' and state['section'] == 'search' and text != "–ù–∞–∑–∞–¥":
            specialties = state.get('search_results', [])
            selected_specialty = next((spec for spec in specialties if spec[1] == text), None)
            if selected_specialty:
                specialty_id, specialty_name, _, _ = selected_specialty
                state['specialty_id'] = specialty_id
                state['current_menu'] = 'specialty_info_menu'
                state['menu_stack'] = ['main_menu', 'grade_menu', 'search_menu']
                full_info = BotHandler.get_full_specialty_info(chat_id, specialty_id, state['grade'])
                BotHandler.send_message_with_attachment(
                    message,
                    full_info,
                    None,
                    None,
                    BotMenus.MENU_OBJECTS['specialty_info_menu']
                )
                logger.info(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ '{specialty_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                return
            else:
                bot.send_message(chat_id, "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=BotMenus.MENU_OBJECTS['search_menu'])
                return

        if text in response:
            data = response[text]
            state['section'] = data.get('section')

            if text == "5. –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
                state['faq_index'] = -1
                state['current_menu'] = data['menu']
                state['menu_stack'] = ['main_menu']
                BotHandler.send_message_with_image(message, data['text'], data['image'], BotMenus.MENU_OBJECTS[data['menu']])
                return

            if text == "1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö":
                state['current_menu'] = data['menu']
                state['menu_stack'] = ['main_menu']
                state['grade'] = None
                state['specialty_id'] = None
                state['search_results'] = None
                BotHandler.send_message_with_image(message, data['text'], data['image'], BotMenus.MENU_OBJECTS[data['menu']])
                return

            if text == "4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–∞–º–∫–∞—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π":
                state['current_menu'] = data['menu']
                state['menu_stack'] = ['main_menu']
                state['grade'] = None
                state['specialty_id'] = None
                state['search_results'] = None
                bot.send_message(chat_id, data['text'], reply_markup=BotMenus.MENU_OBJECTS[data['menu']])
                return

            if text.startswith('1.') and not state['grade']:
                bot.send_message(chat_id, "üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å (9 –∏–ª–∏ 11).", reply_markup=BotMenus.MENU_OBJECTS['grade_menu'])
                return

            response_text = data['text'](chat_id) if callable(data['text']) else data['text']
            current_menu = data.get('menu')

            if text.startswith('1.') and text != "1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö":
                state['menu_stack'] = ['main_menu', 'grade_menu', 'admission_menu']
            else:
                state['menu_stack'] = ['main_menu'] if current_menu in ['payment_menu', 'dormitory_menu', 'faq_menu'] else state['menu_stack']

            state['current_menu'] = current_menu

            if 'special' in data and data['special'] == 'location':
                BotHandler.send_dormitory_location(chat_id, response_text, data.get('image'), BotMenus.MENU_OBJECTS[current_menu])
            elif 'documents' in data:
                BotHandler.send_message_with_documents(message, response_text, data.get('image'), data['documents'], BotMenus.MENU_OBJECTS[current_menu])
            else:
                document_path = data.get('document')
                if callable(document_path):
                    document_path = document_path(chat_id)
                BotHandler.send_message_with_attachment(message, response_text, data.get('image'), document_path, BotMenus.MENU_OBJECTS[current_menu])

        else:
            bot.send_message(chat_id, "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é!", reply_markup=BotMenus.MENU_OBJECTS['main_menu'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        try:
            bot.send_message(
                chat_id,
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=BotMenus.MENU_OBJECTS['main_menu']
            )
        except:
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

def run_bot():
    global bot_running
    bot_running = True
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        bot_running = False
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def stop_bot():
    global bot_running, bot_thread
    if bot_running and bot_thread:
        bot.stop_polling()
        bot_running = False
        if bot_thread.is_alive():
            bot_thread.join(timeout=5)
        with user_states_lock:
            user_states.clear()  # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω—ã")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram-–±–æ—Ç–æ–º")
        self.setFixedSize(900, 600)
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(
                    x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 #F7B3FDFF, stop: 1 #FFA318FF
                );
            }
        """)
        self.setWindowFlags(Qt.Window | Qt.WindowMinimizeButtonHint | Qt.WindowCloseButtonHint)
        icon_path = r"C:\Users\User\Desktop\bot\image\icon.jpg"
        self.setWindowIcon(QIcon(icon_path))
        screen = QApplication.desktop().screenGeometry()
        x = (screen.width() - self.width()) // 2
        y = (screen.height() - self.height()) // 2
        self.move(x, y)
        self.start_button = QPushButton("–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", self)
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: green;
                color: white;
                font-size: 16px;
                border-radius: 100px;
                border: none;
            }
            QPushButton:hover {
                background-color: #006400;
            }
            QPushButton:pressed {
                background-color: darkgreen;
            }
        """)
        self.start_button.setFixedSize(200, 200)
        self.start_button.move(150, 250)
        self.start_button.clicked.connect(self.start_bot)
        self.stop_button = QPushButton("–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", self)
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: red;
                color: white;
                font-size: 16px;
                border-radius: 100px;
                border: none;
            }
            QPushButton:hover {
                background-color: #8B0000;
            }
            QPushButton:pressed {
                background-color: darkred;
            }
        """)
        self.stop_button.setFixedSize(200, 200)
        self.stop_button.move(550, 250)
        self.stop_button.clicked.connect(self.stop_bot)
        self.status_label = QLabel("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω", self)
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("font-size: 25px; color: red; font-weight: bold;")
        self.status_label.setGeometry(0, 50, 900, 50)
        self.time_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: -", self)
        self.time_label.setAlignment(Qt.AlignCenter)
        self.time_label.setStyleSheet("font-size: 20px; color: black;")
        self.time_label.setGeometry(0, 100, 900, 50)

    def start_bot(self):
        global bot_running, bot_thread
        if not bot_running:
            if bot_thread and bot_thread.is_alive():
                stop_bot()
            bot_thread = Thread(target=run_bot)
            bot_thread.daemon = True
            bot_thread.start()
            self.status_label.setText("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            self.status_label.setStyleSheet("font-size: 25px; color: green; font-weight: bold;")
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.time_label.setText(f"–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω: {current_time}")
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        else:
            logger.info("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

    def stop_bot(self):
        global bot_running, bot_thread
        if bot_running:
            self.status_label.setText("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
            self.status_label.setStyleSheet("font-size: 25px; color: orange; font-weight: bold;")
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.time_label.setText(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞: {current_time}")
            QApplication.processEvents()
            stop_bot()
            time.sleep(2)
            self.status_label.setText("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
            self.status_label.setStyleSheet("font-size: 25px; color: red; font-weight: bold;")
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.time_label.setText(f"–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω: {current_time}")
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            bot_thread = None
        else:
            logger.info("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())